# -*- coding: utf-8 -*-
# Generated by Django 1.10 on 2017-07-05 19:47
from __future__ import unicode_literals

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import model_utils.fields
import wagtail.wagtailcore.fields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0008_alter_user_username_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('email', models.EmailField(db_index=True, help_text='Users can register additional e-mail addresses. This is the main e-mail address which is used for login.', max_length=254, unique=True, verbose_name='E-mail')),
                ('name', models.CharField(help_text='Full name of the user.', max_length=140, verbose_name='Name')),
                ('alias', models.CharField(help_text='Public alias used to identify the user.', max_length=20, verbose_name='Alias')),
                ('school_id', models.CharField(help_text='Identification number in your school issued id card.', max_length=20, unique=True, verbose_name='School id')),
                ('role', models.IntegerField(choices=[(0, 'Student'), (1, 'Teacher'), (2, 'School staff'), (3, 'Administrator')], default=0, help_text='User main role in the codeschool platform.', verbose_name='Main')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ExtraEmail',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Profile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('visibility', models.IntegerField(choices=[(0, 'Any Codeschool user'), (1, 'Only friends'), (2, 'Private')], default=1, help_text='Who do you want to share information in your profile?', verbose_name='Visibility')),
                ('phone', models.CharField(blank=True, max_length=20, null=True, verbose_name='Phone')),
                ('gender', models.SmallIntegerField(blank=True, choices=[(0, 'Male'), (1, 'Female'), (2, 'Other')], null=True, verbose_name='gender')),
                ('date_of_birth', models.DateField(blank=True, null=True, verbose_name='date of birth')),
                ('website', models.URLField(blank=True, help_text='A website that is shown publicly in your profile.', null=True, verbose_name='Website')),
                ('about_me', wagtail.wagtailcore.fields.RichTextField(blank=True, help_text='A small description about yourself.', verbose_name='About me')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='profile_ref', to=settings.AUTH_USER_MODEL, verbose_name='user')),
            ],
            options={
                'permissions': (('student', "Can access/modify data visible to student's"), ('teacher', "Can access/modify data visible only to Teacher's")),
            },
        ),
    ]
